PREFIX dcat: <http://www.w3.org/ns/dcat#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX endpoint: <https://prez.dev/endpoint/ogcvocprez/>
PREFIX prez: <https://prez.dev/>
PREFIX ont: <https://prez.dev/ont/>
PREFIX sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX shext: <http://example.com/shacl-extension#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


endpoint:catalog-listing a ont:ListingEndpoint ;
    ont:endpointTemplate "/v/catalogs" ;
    ont:deliversClasses prez:CatalogList ;  # required to determine the correct profile for ConnegP
    sh:targetClass dcat:Catalog ;  # required for query construction
    shext:limit 20 ;
    shext:offset 0 ;
    sh:target [
      sh:select """SELECT ?focus_node
         WHERE {
          ?focus_node dcterms:hasPart ?child_vocab .
          ?child_vocab a skos:ConceptScheme .
            }
         """ ] ;
.

endpoint:catalog-object a ont:ObjectEndpoint ;
    sh:targetNode "$object" ;
    ont:deliversClasses dcat:Catalog ;  # required for link generation for objects
    ont:endpointTemplate "/v/catalogs/$object" ;
    ont:parentEndpoint endpoint:catalog-listing ;
.

endpoint:vocab-listing a ont:ListingEndpoint ;
    ont:endpointTemplate "/v/catalogs/$parent_1/collections" ;
    ont:deliversClasses prez:SchemesList ;  # required to determine the correct profile for ConnegP
    ont:ParentToFocusRelation dcterms:hasPart ;
    sh:targetClass skos:ConceptScheme ;  # required for query construction
    ont:parentEndpoint endpoint:catalog-object ;
    shext:limit 20 ;
    shext:offset 0 ;
    sh:target [
      sh:select """SELECT ?focus_node
         WHERE {
          $parent_1 dcterms:hasPart ?focus_node .
            }
         """ ] ;
.

endpoint:vocab-object a ont:ObjectEndpoint ;
    sh:targetNode "$object" ;
    ont:deliversClasses skos:ConceptScheme ;  # required for link generation for objects
    ont:endpointTemplate "/v/catalogs/$parent_1/collections/$object" ;
    ont:ParentToFocusRelation dcterms:hasPart ;
    ont:parentEndpoint endpoint:vocab-listing ;
.

endpoint:concept-listing a ont:ListingEndpoint ;
    ont:endpointTemplate "/v/catalogs/$parent_2/collections/$parent_1/items" ;
    ont:deliversClasses prez:ConceptList ;  # required to determine the correct profile for ConnegP
    ont:FocusToParentRelation skos:inScheme ;
    sh:targetClass skos:Concept ;  # required for query construction
    ont:parentEndpoint endpoint:vocab-object ;
    shext:limit 20 ;
    shext:offset 0 ;
    sh:target [
      sh:select """SELECT ?focus_node
         WHERE {
          ?focus_node skos:inScheme $parent_1 .
            }
         """ ] ;
.

endpoint:concept-object a ont:ObjectEndpoint ;
    sh:targetNode "$object" ;
    ont:deliversClasses skos:Concept ;  # required for link generation for objects
    ont:endpointTemplate "/v/catalogs/$parent_2/collections/$parent_1/items/$object" ;
    ont:FocusToParentRelation skos:inScheme ;
    ont:parentEndpoint endpoint:concept-listing ;
.

endpoint:narrowers
    a ont:ListingEndpoint ;
    ont:parentEndpoint endpoint:concept-object ;
    ont:deliversClasses skos:Concept ;
    sh:rule
        [
            sh:object "?hasChildren" ;
            sh:predicate prez:hasChildren ;
            sh:subject sh:this ;
        ] ;
    sh:target
        [
            sh:select """SELECT DISTINCT ?focus_node ?hasChildren
             WHERE {
             $parent_1 skos:narrower|^skos:broader ?focus_node .
             BIND(EXISTS{?focus_node skos:narrower|^skos:broader ?grandChildren} AS ?hasChildren)
             }
             """ ;
        ] ;
    shext:limit 20 ;
    shext:offset 0 ;
    shext:orderBy [ sh:path rdfs:label ] ;
    sh:targetClass skos:Concept ;
    ont:endpointTemplate "/v/catalogs/$parent_3/collections/$parent_2/items/$parent_1/narrowers" ;
.

endpoint:top-concepts a ont:ListingEndpoint ;
    ont:deliversClasses skos:Concept ;
    ont:parentEndpoint endpoint:vocab-object ;
    sh:rule [ sh:subject sh:this ;
              sh:predicate prez:hasChildren ;
              sh:object "?hasChildren" ] ;
    sh:target [ sh:select """SELECT DISTINCT ?focus_node ?hasChildren
             WHERE {
             $parent_1 skos:hasTopConcept|^skos:isTopConceptOf ?focus_node .
             BIND(EXISTS{?focus_node skos:narrower|^skos:broader ?grandChildren} AS ?hasChildren)
                }
             """ ] ;
    shext:limit 20 ;
    shext:offset 0 ;
    shext:orderBy [ sh:path rdfs:label ] ;
    sh:targetClass skos:Concept ;
    ont:endpointTemplate "/v/catalogs/$parent_2/collections/$parent_1/top-concepts" ;
.