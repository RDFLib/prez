import logging

from fastapi import APIRouter, Request
from fastapi import Depends
from rdflib import URIRef
from starlette.responses import PlainTextResponse

from prez.dependencies import get_repo
from prez.response import StreamingTurtleAnnotatedResponse
from prez.services.curie_functions import get_uri_for_curie_id
from prez.services.listings import listing_function_new
from prez.services.objects import object_function_new
from prez.sparql.methods import Repo

router = APIRouter(tags=["VocPrez"])

log = logging.getLogger(__name__)

vp_endpoints = {
    "vocabs-listing": "https://prez.dev/endpoint/vocprez/vocabs-listing",
    "collection-listing": "https://prez.dev/endpoint/vocprez/collection-listing",
    "vocab-object": "https://prez.dev/endpoint/vocprez/vocab-object",
    "collection-object": "https://prez.dev/endpoint/vocprez/collection-object",
    "vocab-concept": "https://prez.dev/endpoint/vocprez/vocab-concept",
    "collection-concept": "https://prez.dev/endpoint/vocprez/collection-concept",
    "cs-children": "https://prez.dev/endpoint/vocprez/cs-children",
    "cs-top-concepts": "https://prez.dev/endpoint/vocprez/cs-top-concepts",
}


@router.get("/v", summary="VocPrez Home")
async def vocprez_home():
    return PlainTextResponse("VocPrez Home")


@router.get(
    "/v/vocab",
    summary="List Vocabularies",
    name=vp_endpoints["vocabs-listing"],
)
async def vocab_endpoint(
    request: Request,
    repo: Repo = Depends(get_repo),
    page: int = 1,
    per_page: int = 20,
):
    endpoint_uri = URIRef(vp_endpoints["vocabs-listing"])
    return await listing_function_new(
        request=request,
        repo=repo,
        endpoint_uri=endpoint_uri,
        page=page,
        per_page=per_page,
    )


@router.get(
    "/v/collection",
    summary="List Collections",
    name=vp_endpoints["collection-listing"],
)
async def collection_endpoint(
    request: Request,
    repo: Repo = Depends(get_repo),
    page: int = 1,
    per_page: int = 20,
):
    endpoint_uri = URIRef(vp_endpoints["collection-listing"])
    return await listing_function_new(
        request=request,
        repo=repo,
        endpoint_uri=endpoint_uri,
        page=page,
        per_page=per_page,
    )


@router.get(
    "/v/vocab/{scheme_curie}/all",
    summary="Get Concept Scheme and all its concepts",
    name="https://prez.dev/endpoint/vocprez/vocab",
)
async def vocprez_scheme(
    request: Request, scheme_curie: str, repo: Repo = Depends(get_repo)
):
    """Get a SKOS Concept Scheme and all of its concepts.

    Note: This may be a very expensive operation depending on the size of the concept scheme.
    """
    return await object_function_new(request, object_curie=scheme_curie, repo=repo)


@router.get(
    "/v/vocab/{concept_scheme_curie}",
    summary="Get a SKOS Concept Scheme",
    name=vp_endpoints["vocab-object"],
    response_class=StreamingTurtleAnnotatedResponse,
    responses={
        200: {
            "content": {"text/turtle": {}},
        },
    },
)
async def concept_scheme_route(request: Request, repo: Repo = Depends(get_repo)):
    request_url = request.scope["path"]
    endpoint_uri = URIRef(vp_endpoints["vocab-object"])
    object_uri = get_uri_for_curie_id(request.path_params["concept_scheme_curie"])
    return await object_function_new(
        request, endpoint_uri, request_url, repo, object_uri
    )


@router.get(
    "/v/vocab/{concept_scheme_curie}/top-concepts",
    name=vp_endpoints["cs-top-concepts"],
    summary="Get a SKOS Concept Scheme's top concepts",
    response_class=StreamingTurtleAnnotatedResponse,
    responses={
        200: {
            "content": {"text/turtle": {}},
        },
    },
)
async def cs_top_concepts_endpoint(
    request: Request,
    repo: Repo = Depends(get_repo),
    page: int = 1,
    per_page: int = 20,
):
    endpoint_uri = URIRef(vp_endpoints["cs-top-concepts"])
    return await listing_function_new(
        request=request,
        repo=repo,
        endpoint_uri=endpoint_uri,
        page=page,
        per_page=per_page,
    )


@router.get(
    "/v/vocab/{concept_scheme_curie}/{concept_curie}/narrowers",
    name=vp_endpoints["cs-children"],
    summary="Get a SKOS Concept's narrower concepts",
    response_class=StreamingTurtleAnnotatedResponse,
    responses={
        200: {
            "content": {"text/turtle": {}},
        },
    },
)
async def cs_narrowers_endpoint(
    request: Request,
    concept_curie: str,
    repo: Repo = Depends(get_repo),
    page: int = 1,
    per_page: int = 20,
):
    endpoint_uri = URIRef(vp_endpoints["cs-children"])
    parent_uri = get_uri_for_curie_id(concept_curie)
    return await listing_function_new(
        request=request,
        repo=repo,
        endpoint_uri=endpoint_uri,
        page=page,
        per_page=per_page,
        parent_uri=parent_uri,
    )


@router.get(
    "/v/vocab/{concept_scheme_curie}/{concept_curie}",
    summary="Get a SKOS Concept",
    name=vp_endpoints["vocab-concept"],
    response_class=StreamingTurtleAnnotatedResponse,
    responses={
        200: {
            "content": {"text/turtle": {}},
        },
    },
)
async def concept_scheme_route(request: Request, repo: Repo = Depends(get_repo)):
    request_url = request.scope["path"]
    endpoint_uri = URIRef(vp_endpoints["vocab-concept"])
    object_uri = get_uri_for_curie_id(request.path_params["concept_curie"])
    return await object_function_new(
        request, endpoint_uri, request_url, repo, object_uri
    )


@router.get(
    "/v/collection/{collection_curie}",
    summary="Get Collection",
    name=vp_endpoints["collection-object"],
)
async def concept_scheme_route(request: Request, repo: Repo = Depends(get_repo)):
    request_url = request.scope["path"]
    endpoint_uri = URIRef(vp_endpoints["concept-object"])
    object_uri = get_uri_for_curie_id(request.path_params["concept_curie"])
    return await object_function_new(
        request, endpoint_uri, request_url, repo, object_uri
    )


@router.get(
    "/v/collection/{collection_curie}/{concept_curie}",
    summary="Get Concept",
    name=vp_endpoints["collection-concept"],
)
async def concept_scheme_route(request: Request, repo: Repo = Depends(get_repo)):
    request_url = request.scope["path"]
    endpoint_uri = URIRef(vp_endpoints["collection-concept"])
    object_uri = get_uri_for_curie_id(request.path_params["concept_curie"])
    return await object_function_new(
        request, endpoint_uri, request_url, repo, object_uri
    )
